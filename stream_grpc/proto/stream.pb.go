// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.20.3
// source: stream_grpc/stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_grpc_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_stream_grpc_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_stream_grpc_stream_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_grpc_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_stream_grpc_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_stream_grpc_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type FileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Content  []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *FileResponse) Reset() {
	*x = FileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_grpc_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResponse) ProtoMessage() {}

func (x *FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_grpc_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResponse.ProtoReflect.Descriptor instead.
func (*FileResponse) Descriptor() ([]byte, []int) {
	return file_stream_grpc_stream_proto_rawDescGZIP(), []int{2}
}

func (x *FileResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileResponse) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Content  []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_grpc_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_grpc_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_stream_grpc_stream_proto_rawDescGZIP(), []int{3}
}

func (x *FileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_stream_grpc_stream_proto protoreflect.FileDescriptor

var file_stream_grpc_stream_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x45, 0x0a, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x44, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x5c, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x03, 0x46, 0x75, 0x6e, 0x12, 0x08,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x4c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x08, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x32, 0x2f, 0x0a, 0x0a, 0x42, 0x6f, 0x74, 0x68, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x08, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x35, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x08, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x08, 0x5a, 0x06,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stream_grpc_stream_proto_rawDescOnce sync.Once
	file_stream_grpc_stream_proto_rawDescData = file_stream_grpc_stream_proto_rawDesc
)

func file_stream_grpc_stream_proto_rawDescGZIP() []byte {
	file_stream_grpc_stream_proto_rawDescOnce.Do(func() {
		file_stream_grpc_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_stream_grpc_stream_proto_rawDescData)
	})
	return file_stream_grpc_stream_proto_rawDescData
}

var file_stream_grpc_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_stream_grpc_stream_proto_goTypes = []interface{}{
	(*Request)(nil),      // 0: Request
	(*Response)(nil),     // 1: Response
	(*FileResponse)(nil), // 2: FileResponse
	(*FileRequest)(nil),  // 3: FileRequest
}
var file_stream_grpc_stream_proto_depIdxs = []int32{
	0, // 0: ServiceStream.Fun:input_type -> Request
	0, // 1: ServiceStream.DownLoadFile:input_type -> Request
	0, // 2: BothStream.Chat:input_type -> Request
	0, // 3: ClientStream.UploadFile:input_type -> Request
	1, // 4: ServiceStream.Fun:output_type -> Response
	2, // 5: ServiceStream.DownLoadFile:output_type -> FileResponse
	1, // 6: BothStream.Chat:output_type -> Response
	1, // 7: ClientStream.UploadFile:output_type -> Response
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stream_grpc_stream_proto_init() }
func file_stream_grpc_stream_proto_init() {
	if File_stream_grpc_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stream_grpc_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_grpc_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_grpc_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_grpc_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stream_grpc_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_stream_grpc_stream_proto_goTypes,
		DependencyIndexes: file_stream_grpc_stream_proto_depIdxs,
		MessageInfos:      file_stream_grpc_stream_proto_msgTypes,
	}.Build()
	File_stream_grpc_stream_proto = out.File
	file_stream_grpc_stream_proto_rawDesc = nil
	file_stream_grpc_stream_proto_goTypes = nil
	file_stream_grpc_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceStreamClient is the client API for ServiceStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceStreamClient interface {
	Fun(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceStream_FunClient, error)
	DownLoadFile(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceStream_DownLoadFileClient, error)
}

type serviceStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceStreamClient(cc grpc.ClientConnInterface) ServiceStreamClient {
	return &serviceStreamClient{cc}
}

func (c *serviceStreamClient) Fun(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceStream_FunClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceStream_serviceDesc.Streams[0], "/ServiceStream/Fun", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceStreamFunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceStream_FunClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type serviceStreamFunClient struct {
	grpc.ClientStream
}

func (x *serviceStreamFunClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceStreamClient) DownLoadFile(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceStream_DownLoadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceStream_serviceDesc.Streams[1], "/ServiceStream/DownLoadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceStreamDownLoadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceStream_DownLoadFileClient interface {
	Recv() (*FileResponse, error)
	grpc.ClientStream
}

type serviceStreamDownLoadFileClient struct {
	grpc.ClientStream
}

func (x *serviceStreamDownLoadFileClient) Recv() (*FileResponse, error) {
	m := new(FileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceStreamServer is the server API for ServiceStream service.
type ServiceStreamServer interface {
	Fun(*Request, ServiceStream_FunServer) error
	DownLoadFile(*Request, ServiceStream_DownLoadFileServer) error
}

// UnimplementedServiceStreamServer can be embedded to have forward compatible implementations.
type UnimplementedServiceStreamServer struct {
}

func (*UnimplementedServiceStreamServer) Fun(*Request, ServiceStream_FunServer) error {
	return status.Errorf(codes.Unimplemented, "method Fun not implemented")
}
func (*UnimplementedServiceStreamServer) DownLoadFile(*Request, ServiceStream_DownLoadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownLoadFile not implemented")
}

func RegisterServiceStreamServer(s *grpc.Server, srv ServiceStreamServer) {
	s.RegisterService(&_ServiceStream_serviceDesc, srv)
}

func _ServiceStream_Fun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceStreamServer).Fun(m, &serviceStreamFunServer{stream})
}

type ServiceStream_FunServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type serviceStreamFunServer struct {
	grpc.ServerStream
}

func (x *serviceStreamFunServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceStream_DownLoadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceStreamServer).DownLoadFile(m, &serviceStreamDownLoadFileServer{stream})
}

type ServiceStream_DownLoadFileServer interface {
	Send(*FileResponse) error
	grpc.ServerStream
}

type serviceStreamDownLoadFileServer struct {
	grpc.ServerStream
}

func (x *serviceStreamDownLoadFileServer) Send(m *FileResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ServiceStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceStream",
	HandlerType: (*ServiceStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fun",
			Handler:       _ServiceStream_Fun_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownLoadFile",
			Handler:       _ServiceStream_DownLoadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream_grpc/stream.proto",
}

// BothStreamClient is the client API for BothStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BothStreamClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (BothStream_ChatClient, error)
}

type bothStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewBothStreamClient(cc grpc.ClientConnInterface) BothStreamClient {
	return &bothStreamClient{cc}
}

func (c *bothStreamClient) Chat(ctx context.Context, opts ...grpc.CallOption) (BothStream_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BothStream_serviceDesc.Streams[0], "/BothStream/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &bothStreamChatClient{stream}
	return x, nil
}

type BothStream_ChatClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type bothStreamChatClient struct {
	grpc.ClientStream
}

func (x *bothStreamChatClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bothStreamChatClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BothStreamServer is the server API for BothStream service.
type BothStreamServer interface {
	Chat(BothStream_ChatServer) error
}

// UnimplementedBothStreamServer can be embedded to have forward compatible implementations.
type UnimplementedBothStreamServer struct {
}

func (*UnimplementedBothStreamServer) Chat(BothStream_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

func RegisterBothStreamServer(s *grpc.Server, srv BothStreamServer) {
	s.RegisterService(&_BothStream_serviceDesc, srv)
}

func _BothStream_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BothStreamServer).Chat(&bothStreamChatServer{stream})
}

type BothStream_ChatServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type bothStreamChatServer struct {
	grpc.ServerStream
}

func (x *bothStreamChatServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bothStreamChatServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BothStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BothStream",
	HandlerType: (*BothStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _BothStream_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream_grpc/stream.proto",
}

// ClientStreamClient is the client API for ClientStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientStreamClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (ClientStream_UploadFileClient, error)
}

type clientStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamClient(cc grpc.ClientConnInterface) ClientStreamClient {
	return &clientStreamClient{cc}
}

func (c *clientStreamClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (ClientStream_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientStream_serviceDesc.Streams[0], "/ClientStream/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStreamUploadFileClient{stream}
	return x, nil
}

type ClientStream_UploadFileClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type clientStreamUploadFileClient struct {
	grpc.ClientStream
}

func (x *clientStreamUploadFileClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStreamUploadFileClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamServer is the server API for ClientStream service.
type ClientStreamServer interface {
	UploadFile(ClientStream_UploadFileServer) error
}

// UnimplementedClientStreamServer can be embedded to have forward compatible implementations.
type UnimplementedClientStreamServer struct {
}

func (*UnimplementedClientStreamServer) UploadFile(ClientStream_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}

func RegisterClientStreamServer(s *grpc.Server, srv ClientStreamServer) {
	s.RegisterService(&_ClientStream_serviceDesc, srv)
}

func _ClientStream_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamServer).UploadFile(&clientStreamUploadFileServer{stream})
}

type ClientStream_UploadFileServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type clientStreamUploadFileServer struct {
	grpc.ServerStream
}

func (x *clientStreamUploadFileServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientStreamUploadFileServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ClientStream",
	HandlerType: (*ClientStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _ClientStream_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stream_grpc/stream.proto",
}
